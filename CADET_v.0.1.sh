#!/bin/bash

###########################################################################
# Concatemer by Amplification DEtection Tool V.0.1
# Baptista, Rodrigo, 2022
# 
#
# File Requirement:
# - Input file is in fasta format with 1 line for each name and
#   1 line for each sequence
#       - recomendation: seqtk seq -A file.fastq > file.fasta
#
# Usage:
# ./CADET.sh <fasta> <window size> <slide size>
#
# fasta = fasta file with reads generated by WGA sequencing using ONT
# window size = length of desired window sequences in bp
# slide size = length to slide each window over in bp
#
###########################################################################

usage="Usage: $0 <fasta> <window size> <slide size>"
nseq=$(grep -c ">" $1)

if [ -z "$3" ]
then
  echo $usage
  exit
fi

inFasta=$1
inW=$2
inS=$3
n=$nseq
#n=$4
## Remove result file if already exists
final_name=$(paste -d '_' \
              <(echo 'windows') \
              <(basename $inFasta))
rm -f $final_name

## Separate sequences in fasta file
echo "> Splitting fasta sequences"
mkdir -p ./fasta_indiv

### Remove alignment formating within sequences
awk '!(NR%2) {gsub("-","")}{print}' $inFasta > ./fasta_indiv/inFasta_format.fasta

### Separate
awk '/^>/{close(s); s="fasta_indiv/"++d".fa"} {print > s}' < ./fasta_indiv/inFasta_format.fasta

## Make sliding windows
mkdir -p window_results

for indiv_f in fasta_indiv/*.fa ;
do
  # Get sequence name
  seqName=$(awk 'NR==1; ORS=""; OFS=""' $indiv_f | sed 'y/>/ /')
  echo ">" $seqName
  
  # Create result file name
  filename=$(paste -d '_' \
              <(echo 'window_results/windows') \
              <(basename $indiv_f))
              
  # Calculate number of windows
  ## Total characters in sequence
  length=$(awk 'FNR == 2' $indiv_f | wc -m)
  ## Calcuate total complete windows
  total=$((($length-$inW)/$inS))

  ## Exit with error if sequence does not create at least 2 windows
  if (( $total < 2 ));
  then
      echo ">>> Sequence is too short to create windows of desired size and slide. Sequence will be skipped."
      echo $seqName", too short!" >> window_results/short.txt
      cat window_results/short.txt | wc -l| awk '{print "Short sequences:\t"$0}' >> window_results/stats.txt
      continue
  else
      echo ">>> Creating" $total "windows"
  fi
  
  # Create windows
  for i in `seq 1 $total`;
  do
    # Define start and end of window
    start=$((1 + ($i-1)*$inS))
    end=$(($start + $inW -1))

    # Create window name
    nameW=$(paste -d '_' \
              <(echo ">$i") \
              <(echo $seqName) \
              <(echo 'window') \
              <(echo $start) \
              <(echo $end))
            
    echo $nameW >> $filename
    
    # Get window sequence
    awk 'FNR == 2' $indiv_f | \
      awk -v start="$start" -v w="$inW" '{ print substr($1, start, w) }' \
      >> $filename
    
  done
         
done

## Run Minimap2 for overlaps
for (( j = 1; j <= $n; j++ ))
  do
#  minimap2 -x ava-ont -a 'window_results/'windows_$j.fa 'window_results/'windows_$j.fa > 'window_results/'windows_$j.sam  
nucmer --maxmatch --coords -p 'window_results/'window_$j 'window_results/'windows_$j.fa 'window_results/'windows_$j.fa --nosimplify
more 'window_results/'window_$j.coords| sed 's/|/\t/g' |grep -v "NUCMER\|TAGS\|=="|cut -f5,6| awk '{if ($1 != $2) print $0}' > 'window_results/'window_$j.concat
more 'window_results/'window_$j.coords| sed 's/|/\t/g' |grep -v "NUCMER\|TAGS\|=="|cut -f5,6| awk '{if ($1 != $2) print $0}'|awk -F'\t' 'NR>0{$0=$0"\t"NR-1} 1'| sed 's/_/\t/g'| cut -f2| sort| uniq| awk -v var=$j '{print "window_"var"\t"$0}' >> window_read_ID.txt
more 'window_results/'window_$j.coords| sed 's/|/\t/g' |grep -v "NUCMER\|TAGS\|=="|cut -f5,6| awk '{if ($1 != $2) print $0}'| wc -l| sed 's/ //g' >> 'window_results/'concat_count.tab
#cd window_results
#ls | grep '\.coords$' | sed 's/_/\t/g'| sed 's/\./\t/g'| sort -k2 -n | sed 's/ow\t/ow_/g'| sed 's/\tcoords/.coords/g' > concat_IDs.txt
#if concat=0 print no concatemer detected
done

## Combine results
#echo "> Combining window results"
#cat window_results/*.fa >> $final_name
more window_results/concat_count.tab | awk -F'\t' 'NR>0{$0=$0"\t"NR-1} 1'| awk '{print "window_"$2+1"\t"$1/2}'| awk '{if ($2 != 0) print $0}' > Concat_Final.tab

more window_results/concat_count.tab | awk -F'\t' 'NR>0{$0=$0"\t"NR-1} 1'| awk '{print "window_"$2+1"\t"$1}'| awk '{if ($2 ==0) print $2}'| wc -l| awk '{print "Number of non-concatemer detected: "$0}' >> window_results/stats.txt 
more window_results/concat_count.tab | awk -F'\t' 'NR>0{$0=$0"\t"NR-1} 1'| awk '{print "window_"$2+1"\t"$1}'| awk '{if ($2 !=0) print $2}'| wc -l| awk '{print "Number of putative concatemer detected: "$0}' >> window_results/stats.txt
grep -c ">" $1 | awk '{print "Total number of Reads:\t"$0"\n### putative concatemers ###\nread_number\tread_ID\tself_alignemts"}' >> window_results/stats.txt
join window_read_ID.txt Concat_Final.tab >> window_results/stats.txt
join window_read_ID.txt Concat_Final.tab | sed 's/ /\t/g'| cut -f 2 > window_results/concat_IDs
#seqtk subseq fasta window_results/concat_IDs > Concatemer.fasta
## Remove intermediate files
rm Concat_Final.tab
rm window_read_ID.txt
rm -R fasta_indiv
rm nucmer.error
rm window_results/*.delta
rm window_results/window*.concat
rm window_results/windows*.fa
#rm -R window_results
#echo "ls | grep -c '\.coords$'"
#echo ""
mkdir window_results/coords
mv window_results/*.coords window_results/coords/
echo "> FINISHED!"
echo "Thank you for Running CADET"
